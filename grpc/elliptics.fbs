namespace fb_grpc_dnet;

// TODO: use number ids for fields

// Common structs

table Id {
    id:[uint8];
    group_id:uint;
}

table Cmd {
    id:Id (required);
    status:int32;
    cmd:int32;
    backend_id:int32;
    trace_id:uint64;
    flags:uint64;
    trans:uint64;
    size:uint64;
}

// Rpcs params

// Write

table WriteRequestHeader {
    cmd:Cmd (required);

    ioflags:uint64;
    user_flags:uint64;
    timestamp:uint64;

    json_size:uint64;
    json_capacity:uint64;
    json_timestamp:uint64;

    data_offset:uint64;
    data_size:uint64;
    data_capacity:uint64;
    data_commit_size:uint64;

    cache_lifetime:uint64;
}

table WriteRequest {
    header:WriteRequestHeader;
    json:[uint8];
    data:[uint8];
}

table LookupResponse {
    cmd:Cmd (required);

    record_flags:uint64;
    user_flags:uint64;
    path:string;

    json_timestamp:uint64;
    json_offset:uint64;
    json_size:uint64;
    json_capacity:uint64;
    json_checksum:[uint8];

    data_timestamp:uint64;
    data_offset:uint64;
    data_size:uint64;
    data_checksum:[uint8];
}

// Read

table ReadRequest {
    cmd:Cmd (required);

    ioflags:uint64;
    read_flags:uint64;
    data_offset:uint64;
    data_size:uint64;
}

table ReadResponseHeader {
    cmd:Cmd (required);

    record_flags:uint64;
    user_flags:uint64;

    json_timestamp:uint64;
    json_size:uint64;
    json_capacity:uint64;
    read_json_size:uint64;

    data_timestamp:uint64;
    data_size:uint64;
    read_data_offset:uint64;
    read_data_size:uint64;
}

table ReadResponse {
    info:ReadResponseHeader;
    json:[uint8];
    data:[uint8];
}

// Rpc service

rpc_service Elliptics {
    Write(WriteRequest):LookupResponse (streaming: "client");
    Read(ReadRequest):ReadResponse (streaming: "server");
}
